config.tx_extbase.objects {
	Innologi\StreamovationsVp\Domain\Service\EventServiceInterface {
		className = Innologi\StreamovationsVp\Domain\Service\EventService
	}
	Innologi\StreamovationsVp\Library\RestRepository\RepositoryInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\Repository
	}
	Innologi\StreamovationsVp\Library\RestRepository\ResponseServiceInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\ResponseService
	}
	Innologi\StreamovationsVp\Library\RestRepository\ResponseFactoryInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\ResponseFactory
	}
	Innologi\StreamovationsVp\Library\RestRepository\ResponseInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\MagicResponse
	}
	Innologi\StreamovationsVp\Library\RestRepository\RequestFactoryInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\RequestFactory
	}
	Innologi\StreamovationsVp\Library\RestRepository\RequestInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\Typo3Request
	}
	Innologi\StreamovationsVp\Library\RestRepository\RequestUriInterface {
		className = Innologi\StreamovationsVp\Library\RestRepository\RequestUri
	}
	Innologi\StreamovationsVp\Library\AssetProvider\ProviderServiceInterface {
		className = Innologi\StreamovationsVp\Library\AssetProvider\ProviderService
	}
	# Allow overruling of assetproviders like so
	#Innologi\StreamovationsVp\Library\AssetProvider\Provider\JavascriptProvider {
	#	className = Innologi\StreamovationsVp\Library\AssetProvider\Provider\JavascriptProvider
	#}
}

plugin.tx_streamovationsvp {
	view {
		templateRootPaths.10 = {$plugin.tx_streamovationsvp.view.templateRootPath}
		partialRootPaths.10 = {$plugin.tx_streamovationsvp.view.partialRootPath}
		layoutRootPaths.10 = {$plugin.tx_streamovationsvp.view.layoutRootPath}
	}
	persistence {
		storagePid = {$plugin.tx_streamovationsvp.persistence.storagePid}
	}
	
	# rest repository configuration
	rest {
		features {
			# only works for request types that support it
			ignoreHttpConfiguration = 0
			# model-less fallback, for development purposes only
			disableResponseMapper = 1
		}
		repository {
			default.request {
				scheme = {$plugin.tx_streamovationsvp.rest.scheme}
				baseUri = {$plugin.tx_streamovationsvp.rest.baseUri}
				apiUri = api.php
			}
			event {
				request.apiUri = api.php/sessions/date
				response {
					rootElement = events
					list = 1
				}
			}
			playlist.request {
				apiUri = api.php/playlists/pub
			}
			meetingdata {
				request.apiUri = api.php/meetingdata
				response {
					exclude = result
					property {
						timestamps {
							mappings {
								10 = topicTimeline
								10.if {
									field = metadataType
									value = topic
								}
								10.else.sendToMapping = 20
								20 = speakerTimeline
							}
							remove = 1
						}
						topicTimeline.json = 1
						speakerTimeline.json = 1
					}
				}
			}
		}
	}
	
	# assets provider configuration
	assets {
		controller.Video.action.show {
			javascript {
				libs {
					jQuery = {$plugin.tx_streamovationsvp.javascript.jqueryLib}
					jQuery.if.value = {$plugin.tx_streamovationsvp.javascript.includeJquery}
					jQuery.if.equals = 1
					jQuery.forceOnTop = 1
					jwPlayer = {$plugin.tx_streamovationsvp.javascript.jwPlayerLib}
					jwPlayer.placeInFooter = 1
					smvPlayer = {$plugin.tx_streamovationsvp.javascript.smvPlayerLib}
					smvPlayer.placeInFooter = 1
					# this sucks, but if not loaded from original location, it can't find its dependencies out of the box
					jwPlayer.disableCompression = 1
					jwPlayer.excludeFromConcatenation = 1
					smvPlayer.disableCompression = 1
					smvPlayer.excludeFromConcatenation = 1
				}
				inline {
					tx_streamovationsvp_jsInline {
						# SvpStarter
						10 = TEMPLATE
						10.template = FILE
						10.template.file = {$plugin.tx_streamovationsvp.javascript.starterFile}
						10.marks {
							JWPLAYER_KEY = TEXT
							JWPLAYER_KEY.value = {$plugin.tx_streamovationsvp.settings.jwPlayer.key}
							PLAYER_TYPE = TEXT
							PLAYER_TYPE.value = {$plugin.tx_streamovationsvp.settings.player}
							POLLING_INTERVAL = TEXT
							POLLING_INTERVAL.value = {$plugin.tx_streamovationsvp.settings.polling.interval}
							CURRENT_PAGE_ID = TEXT
							CURRENT_PAGE_ID.data = TSFE:id
							SPEAKER_IMAGE_DIR = TEXT
							SPEAKER_IMAGE_DIR.value = {$plugin.tx_streamovationsvp.settings.speakers.imgDir}
						}
						# SvpPolling
						20 = FILE
						20.file = {$plugin.tx_streamovationsvp.javascript.pollingFile}
						# init
						30 = FILE
						30.file = {$plugin.tx_streamovationsvp.javascript.initFile}
						placeInFooter = 1
					}
				}
			}
		}
	}
	
	settings {
		player = {$plugin.tx_streamovationsvp.settings.player}
		live {
			languages = {$plugin.tx_streamovationsvp.settings.live.language}
		}
		jwPlayer {
			width = {$plugin.tx_streamovationsvp.settings.jwPlayer.width}
			height = {$plugin.tx_streamovationsvp.settings.jwPlayer.height}
			smilSupport = {$plugin.tx_streamovationsvp.settings.jwPlayer.smilSupport}
			smilTemplate = {$plugin.tx_streamovationsvp.settings.jwPlayer.smilTemplate}
		}
		topics {
			enable = {$plugin.tx_streamovationsvp.settings.topics.enable}
		}
		speakers {
			enable = {$plugin.tx_streamovationsvp.settings.speakers.enable}
			imgDir = {$plugin.tx_streamovationsvp.settings.speakers.imgDir}
			imgHeight = {$plugin.tx_streamovationsvp.settings.speakers.imgHeight}
			imgWidth = {$plugin.tx_streamovationsvp.settings.speakers.imgWidth}
			imgDefault = {$plugin.tx_streamovationsvp.settings.speakers.imgDefault}
		}
		
		# these are all overruled by flexform for now
		event {
			dateFrom =
			dateTo =
			dateAt =
			category =
			subCategory =
			tags =
		}
		playlist {
			hash =
		}
		showPid =
		backPid =
	}
}

page.includeCSS.streamovationsVpFrontend = {$plugin.tx_streamovationsvp.css.frontendFile}