config.tx_extbase.objects {
	Innologi\StreamovationsVp\Domain\Service\EventServiceInterface {
		className = Innologi\StreamovationsVp\Domain\Service\EventService
	}
	Innologi\StreamovationsVp\Library\Rest\RepositoryInterface {
		className = Innologi\StreamovationsVp\Library\Rest\Repository
	}
	Innologi\StreamovationsVp\Library\Rest\ResponseFactoryInterface {
		className = Innologi\StreamovationsVp\Library\Rest\ResponseFactory
	}
	Innologi\StreamovationsVp\Library\Rest\ResponseInterface {
		className = Innologi\StreamovationsVp\Library\Rest\MagicResponse
	}
	Innologi\StreamovationsVp\Library\Rest\RequestFactoryInterface {
		className = Innologi\StreamovationsVp\Library\Rest\RequestFactory
	}
	Innologi\StreamovationsVp\Library\Rest\RequestInterface {
		className = Innologi\StreamovationsVp\Library\Rest\Typo3Request
	}
	Innologi\StreamovationsVp\Library\Rest\RequestUriInterface {
		className = Innologi\StreamovationsVp\Library\Rest\RequestUri
	}
}

plugin.tx_streamovationsvp {
	view {
		templateRootPaths.10 = {$plugin.tx_streamovationsvp.view.templateRootPath}
		partialRootPaths.10 = {$plugin.tx_streamovationsvp.view.partialRootPath}
		layoutRootPaths.10 = {$plugin.tx_streamovationsvp.view.layoutRootPath}
	}
	persistence {
		storagePid = {$plugin.tx_streamovationsvp.persistence.storagePid}
	}
	rest {
		features {
			# only works for request types that support it
			ignoreHttpConfiguration = 0
			# model-less fallback, for development purposes only
			disableResponseMapper = 1
		}
		repository {
			default.request {
				scheme = {$plugin.tx_streamovationsvp.rest.scheme}
				baseUri = {$plugin.tx_streamovationsvp.rest.baseUri}
				apiUri = api.php
			}
			event {
				request.apiUri = api.php/sessions/date
				response {
					container = events
					list = 1
				}
			}
			playlist.request {
				apiUri = api.php/playlists/pub
			}
			meetingdata {
				request.apiUri = api.php/meetingdata
				response {
					exclude = result
					property {
						timestamps {
							mappings {
								10 {
									name = topicTimeline
									if {
										field = metadataType
										value = topic
									}
									else {
										sendToMapping = 20
									}
								}
								20 {
									name = speakerTimeline
								}
							}
							remove = 1
						}
						topicTimeline.json = 1
						speakerTimeline.json = 1
					}
				}
			}
		}
	}
	settings {
		player = {$plugin.tx_streamovationsvp.settings.player}
		live {
			languages = {$plugin.tx_streamovationsvp.settings.live.language}
		}
		jwPlayer {
			width = {$plugin.tx_streamovationsvp.settings.jwPlayer.width}
			height = {$plugin.tx_streamovationsvp.settings.jwPlayer.height}
			smilSupport = {$plugin.tx_streamovationsvp.settings.jwPlayer.smilSupport}
			smilTemplate = {$plugin.tx_streamovationsvp.settings.jwPlayer.smilTemplate}
		}
		topics {
			enable = {$plugin.tx_streamovationsvp.settings.topics.enable}
		}
		speakers {
			enable = {$plugin.tx_streamovationsvp.settings.speakers.enable}
			imgDir = {$plugin.tx_streamovationsvp.settings.speakers.imgDir}
			imgHeight = {$plugin.tx_streamovationsvp.settings.speakers.imgHeight}
			imgWidth = {$plugin.tx_streamovationsvp.settings.speakers.imgWidth}
			imgDefault = {$plugin.tx_streamovationsvp.settings.speakers.imgDefault}
		}
		
		# these are all overruled by flexform for now
		event {
			dateFrom =
			dateTo =
			dateAt =
			category =
			subCategory =
			tags =
		}
		playlist {
			hash =
		}
		showPid =
		backPid =
	}
	javascript {
		jQuery.external = 0
		jQuery = {$plugin.tx_streamovationsvp.javascript.jqueryLib}
		jwPlayer.external = 0
		jwPlayer = {$plugin.tx_streamovationsvp.javascript.jwPlayerLib}
		# this sucks, but if not loaded from original location, it can't find its dependencies out of the box
		jwPlayer.disableCompression = 1
		smvPlayer.external = 0
		smvPlayer = {$plugin.tx_streamovationsvp.javascript.smvPlayerLib}
		# same as jwplayer
		smvPlayer.disableCompression = 1
		
		inlineJS = COA
		inlineJS {
			# SvpStarter
			10 = TEMPLATE
			10.template = FILE
			10.template.file = {$plugin.tx_streamovationsvp.javascript.starterFile}
			10.marks {
				JWPLAYER_KEY = TEXT
				JWPLAYER_KEY.value = {$plugin.tx_streamovationsvp.settings.jwPlayer.key}
				PLAYER_TYPE = TEXT
				PLAYER_TYPE.value = {$plugin.tx_streamovationsvp.settings.player}
				POLLING_INTERVAL = TEXT
				POLLING_INTERVAL.value = {$plugin.tx_streamovationsvp.settings.polling.interval}
				CURRENT_PAGE_ID = TEXT
				CURRENT_PAGE_ID.data = TSFE:id
				# doesn't work if livestream doesn't put hash in GETvar, idiot!
				#HASH = TEXT
				#HASH.data = GP:tx_streamovationsvp_video|hash
				SPEAKER_IMAGE_DIR = TEXT
				SPEAKER_IMAGE_DIR.value < plugin.tx_streamovationsvp.settings.speakers.imgDir
			}
			# SvpPolling
			20 = FILE
			20.file = {$plugin.tx_streamovationsvp.javascript.pollingFile}
		}
	}
}

[globalVar = LIT:0 < {$plugin.tx_streamovationsvp.javascript.includeJquery}] 
page.includeJSlibs.streamovationsvp_jQuery < plugin.tx_streamovationsvp.javascript.jQuery

[globalVar = LIT:0 < {$plugin.tx_streamovationsvp.settings.player}]
page.includeJSlibs.streamovationsvp_jwPlayer < plugin.tx_streamovationsvp.javascript.jwPlayer
page.jsInline.198111210 < plugin.tx_streamovationsvp.javascript.inlineJS

[globalVar = LIT:1 < {$plugin.tx_streamovationsvp.settings.player}]
page.includeJSlibs.streamovationsvp_smvPlayer < plugin.tx_streamovationsvp.javascript.smvPlayer


[global]

plugin.tx_streamovationsvp._CSS_DEFAULT_STYLE (

	.tx-streamovations-vp {
		position:relative;
	}
	.tx-streamovations-vp.fullwidth {
		width:940px;
	}

	.tx-streamovations-vp ul {
		margin:0 !important;
		padding:0 !important;
	}
	.tx-streamovations-vp ul li {
		list-style:none;
	}
	
	.tx-streamovations-vp .video-player {
		width:600px;
		height:355px;
		clear:none;
	}
	
	.tx-streamovations-vp .header {
		font-size:1.1rem;
		font-weight:bold;
		margin:0 0 1em;
	}
	
	.tx-streamovations-vp .events-header {
		font-size:0.85rem;
		font-weight:bold;
		margin:0;
	}
	.tx-streamovations-vp .events {
		padding:5px;
		line-height:1.4rem;
	}
	.tx-streamovations-vp.event-link:before,
	.tx-streamovations-vp .event-link:before {
		background-image:url("/typo3conf/ext/streamovations_vp/Resources/Public/Icons/videocam.png");
		content:"";
		float:left;
		height:16px;
		width:16px;
		margin:2px 8px 0 0;
	}
	
	.tx-streamovations-vp .back-link:before {
		content:"\21a9\0000a0";
	}
	
	.tx-streamovations-vp .topics {
		float:right;
		width:325px;
		font-size:.8rem;
	}
	.tx-streamovations-vp .topic {
		padding-bottom:8px;
	}
	.tx-streamovations-vp .topic.active,
	.tx-streamovations-vp .topic.active .topic-link {
		background-color:#e2eeff;
		font-weight:bold;
	}
	
	.tx-streamovations-vp .speakers {
		width:570px;
		height:220px;
		padding:15px 0;
	}
	.tx-streamovations-vp .speaker {
		display:none;
		padding:5px;
	}
	.tx-streamovations-vp .speaker.active {
		display:inline-block;
	}
	.tx-streamovations-vp .speaker-data {
		margin-top:5px;
		font-size:.8rem;
		font-family:Verdana,Arial,sans-serif;
		text-align:center;
	}
	.tx-streamovations-vp .speaker-avatar {
		border:1px solid #888;
	}
	
	
	
	/* Flash messages */
	
	.tx-streamovations-vp .typo3-messages {
		overflow:hidden;
	}
	.tx-streamovations-vp .typo3-message {
		margin:8px 0;
		padding:10px;
		min-width:100px;
		font-size:0.9em;
	}
	.tx-streamovations-vp .typo3-message {
		float:left;
		clear:both;
	}
	.tx-streamovations-vp .typo3-message .message-header {
		font-weight:bold;
	}
	.tx-streamovations-vp .typo3-message.message-error {
		background-color:#fcb;
		border:1px solid #ea9;
		color:#a33;
	}
	.tx-streamovations-vp .typo3-message.message-warning {
		background-color:#ffb;
		border:1px solid #f5d588;
		color:#85510d;
	}
	.tx-streamovations-vp .typo3-message.message-notice {
		background-color:#e4e4e4;
		border:1px solid #d5d5d5;
		color:#443;
	}
	.tx-streamovations-vp .typo3-message.message-information {
		background-color:#def;
		border:1px solid #cdf;
		color:#469;
	}
	.tx-streamovations-vp .typo3-message.message-ok {
		background-color:#cdefc0;
		border:1px solid #b9ddaa;
		color:#3b7826;		
	}
)	
