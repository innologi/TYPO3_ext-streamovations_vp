config.tx_extbase.objects {
	Innologi\StreamovationsVp\Library\Rest\ResponseFactoryInterface {
		className = Innologi\StreamovationsVp\Library\Rest\ResponseFactory
	}
	Innologi\StreamovationsVp\Library\Rest\ResponseInterface {
		className = Innologi\StreamovationsVp\Library\Rest\MagicResponse
	}
	Innologi\StreamovationsVp\Library\Rest\RequestFactoryInterface {
		className = Innologi\StreamovationsVp\Library\Rest\RequestFactory
	}
	Innologi\StreamovationsVp\Library\Rest\RequestInterface {
		className = Innologi\StreamovationsVp\Library\Rest\Typo3Request
	}
	Innologi\StreamovationsVp\Library\Rest\RequestUriInterface {
		className = Innologi\StreamovationsVp\Library\Rest\RequestUri
	}
}

plugin.tx_streamovationsvp {
	view {
		templateRootPaths.10 = {$plugin.tx_streamovationsvp.view.templateRootPath}
		partialRootPaths.10 = {$plugin.tx_streamovationsvp.view.partialRootPath}
		layoutRootPaths.10 = {$plugin.tx_streamovationsvp.view.layoutRootPath}
	}
	persistence {
		storagePid = {$plugin.tx_streamovationsvp.persistence.storagePid}
	}
	rest {
		features {
			# only works for request types that support it
			ignoreHttpConfiguration = 0
			# model-less fallback, for development purposes only
			disableResponseMapper = 1
		}
		repository {
			default.request {
				scheme = {$plugin.tx_streamovationsvp.rest.scheme}
				baseUri = {$plugin.tx_streamovationsvp.rest.baseUri}
				apiUri = api.php
			}
			event {
				request.apiUri = api.php/sessions/date
				response {
					container = events
					list = 1
				}
			}
			playlist.request {
				apiUri = api.php/playlists/pub
			}
			meetingdata {
				request.apiUri = api.php/meetingdata
				response {
					exclude = result
					property {
						timestamps {
							mappings {
								10 {
									name = topicTimeline
									if {
										field = metadataType
										value = topic
									}
									else {
										sendToMapping = 20
									}
								}
								20 {
									name = speakerTimeline
								}
							}
							remove = 1
						}
						topicTimeline.json = 1
						speakerTimeline.json = 1
					}
				}
			}
		}
	}
	settings {
		player = {$plugin.tx_streamovationsvp.settings.player}
		topics {
			enable = {$plugin.tx_streamovationsvp.settings.topics.enable}
		}
		speakers {
			enable = {$plugin.tx_streamovationsvp.settings.speakers.enable}
			imgDir = {$plugin.tx_streamovationsvp.settings.speakers.imgDir}
			imgHeight = {$plugin.tx_streamovationsvp.settings.speakers.imgHeight}
			imgWidth = {$plugin.tx_streamovationsvp.settings.speakers.imgWidth}
			imgDefault = {$plugin.tx_streamovationsvp.settings.speakers.imgDefault}
		}
		event {
			# supported formats: http://php.net/manual/en/datetime.formats.php
			dateFrom =
			dateTo =
			dateAt =
			category =
			subCategory =
			tags =
		}
		playlist {
			hash =
		}
	}
	javascript {
		jQuery.external = 0
		jQuery = {$plugin.tx_streamovationsvp.javascript.jqueryLib}
		jwPlayer.external = 0
		jwPlayer = {$plugin.tx_streamovationsvp.javascript.jwPlayerLib}
		# this sucks, but if not loaded from original location, it can't find its dependencies out of the box
		jwPlayer.disableCompression = 1
		smvPlayer.external = 0
		smvPlayer = {$plugin.tx_streamovationsvp.javascript.smvPlayerLib}
		# same as jwplayer
		smvPlayer.disableCompression = 1
		
		inlineJS = COA
		inlineJS {
			10 = TEMPLATE
			10.template = FILE
			10.template.file = {$plugin.tx_streamovationsvp.javascript.starterFile}
			10.marks {
				JWPLAYER_KEY = TEXT
				JWPLAYER_KEY.value = {$plugin.tx_streamovationsvp.settings.jwPlayerKey}
				PLAYER_TYPE = TEXT
				PLAYER_TYPE.value = {$plugin.tx_streamovationsvp.settings.player}
			}
		}
	}
}

[globalVar = LIT:0 < {$plugin.tx_streamovationsvp.javascript.includeJquery}] 
page.includeJSlibs.streamovationsvp_jQuery < plugin.tx_streamovationsvp.javascript.jQuery

[globalVar = LIT:0 < {$plugin.tx_streamovationsvp.settings.player}]
page.includeJSlibs.streamovationsvp_jwPlayer < plugin.tx_streamovationsvp.javascript.jwPlayer
page.jsInline.198111210 < plugin.tx_streamovationsvp.javascript.inlineJS

[globalVar = LIT:1 < {$plugin.tx_streamovationsvp.settings.player}]
page.includeJSlibs.streamovationsvp_smvPlayer < plugin.tx_streamovationsvp.javascript.smvPlayer


[global]

plugin.tx_streamovationsvp._CSS_DEFAULT_STYLE (

	.tx-streamovations-vp {
		position:relative;
		width:940px;
	}
	.tx-streamovations-vp table th {
		text-align:left;
		font-weight:bold;
	}
	.tx-streamovations-vp table caption {
		display:none;
	}
	.tx-streamovations-vp ul {
		margin:0 !important;
		padding:0 !important;
	}
	.tx-streamovations-vp ul li {
		list-style:none;
	}
	
	.tx-streamovations-vp .video-player {
		width:600px;
		clear:none;
	}
	
	.tx-streamovations-vp .header {
		font-size:1.1rem;
		font-weight:bold;
		margin:0 0 1em;
	}
	
	.tx-streamovations-vp .topics {
		float:right;
		width:325px;
		font-size:.9rem;
	}
	.tx-streamovations-vp .topic,
	.tx-streamovations-vp .topic-link {
		padding:2px;
		color:#000;
		text-decoration:none;
	}
	.tx-streamovations-vp .topic.active,
	.tx-streamovations-vp .topic.active .topic-link {
		background-color:#e2eeff;
		font-weight:bold;
	}
	
	.tx-streamovations-vp .topic-link:hover,
	.tx-streamovations-vp .topic-link:focus {
		text-decoration:underline;
	}
	
	.tx-streamovations-vp .speakers {
		width:570px;
		height:220px;
		padding:15px 0;
	}
	.tx-streamovations-vp .speaker {
		display:none;
		padding:5px;
	}
	.tx-streamovations-vp .speaker.active {
		display:inline-block;
	}
	.tx-streamovations-vp .speaker-data {
		margin-top:5px;
		font-size:.8rem;
		font-family:Verdana,Arial,sans-serif;
		text-align:center;
	}
	.tx-streamovations-vp .speaker-avatar {
		border:1px solid #888;
	}
)	
